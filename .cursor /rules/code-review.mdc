---
description: 
globs: 
alwaysApply: false
---
# 代码审查规范

## 说明
本规则适用于项目的代码审查流程。高质量的代码审查可以提高代码质量，减少缺陷，促进知识共享，提升团队整体水平。

## 代码审查流程

### 提交审查前的准备
1. **自我审查**：提交者应先自行检查代码，确保符合项目编码规范
2. **运行测试**：确保所有测试通过
3. **编写清晰的PR描述**：包括功能介绍、实现思路、测试结果等信息

### 审查流程
1. **指定审查者**：根据代码涉及的模块，指定相关领域的专家进行审查
2. **审查时间控制**：审查者应在24小时内完成审查，如无法完成应及时通知
3. **审查反馈**：审查者提供具体、建设性的反馈
4. **修改与再审查**：提交者根据反馈进行修改，审查者再次审查
5. **审查通过**：所有问题解决后，审查者批准合并

## 审查重点

### 代码质量
- **可读性**：代码是否清晰易懂，命名是否合理
- **简洁性**：代码是否简洁，避免不必要的复杂性
- **一致性**：是否与项目现有代码风格保持一致
- **DRY原则**：是否存在重复代码，可以提取为公共方法

### 功能实现
- **需求符合度**：代码是否完全实现了需求
- **边界条件**：是否考虑了各种边界条件和异常情况
- **性能考虑**：是否存在性能问题，如不必要的循环、重复计算等
- **安全性**：是否存在安全隐患，如SQL注入、XSS攻击等

### 文档与注释
- **文档更新**：是否更新了相关文档
- **代码注释**：复杂逻辑是否有清晰的注释
- **API文档**：公共API是否有完整的文档

## 反馈规范

### 反馈原则
- **具体而非笼统**：指出具体问题，而不是笼统的批评
- **解释而非命令**：解释为什么需要修改，而不是简单命令
- **建议而非强制**：提供改进建议，而非强制要求
- **关注代码而非人**：评论针对代码本身，而非编写者

### 反馈分类
- **必须修改（Blocker）**：严重问题，必须修改才能合并
- **应该修改（Major）**：重要问题，应该修改但可以讨论
- **可以修改（Minor）**：次要问题，建议修改但不强制
- **知识分享（Nitpick）**：不需要修改，仅作为知识分享

### 反馈示例
```
// 好的反馈示例
[Major] 这个函数没有处理用户名为空的情况，可能导致后续逻辑出错。
建议添加空值检查，例如：
if (!username) {
  return res.status(400).json({ error: '用户名不能为空' });
}

// 不好的反馈示例
这段代码写得不好，重写一下。
```

## 审查效率提升

### 审查工具
- 使用代码审查工具（如GitHub PR、GitLab MR）进行在线审查
- 配置自动化检查工具（如ESLint、Prettier）提前发现问题
- 使用代码覆盖率工具监控测试覆盖情况

### 审查技巧
- **分批审查**：对于大型PR，分批次审查不同部分
- **先审查整体，再审查细节**：先了解整体设计和实现思路，再关注具体代码
- **关注变更最多的文件**：优先审查变更最多的文件，这些文件通常包含核心逻辑

### 知识共享
- 在代码审查中分享最佳实践和设计模式
- 记录常见问题和解决方案，形成团队知识库
- 定期组织代码审查经验分享会

## 审查文化建设

### 积极的审查文化
- 将代码审查视为学习和改进的机会，而非批评
- 鼓励团队成员积极参与代码审查，提升整体水平
- 强调代码审查的目的是提高代码质量，而非评判个人能力

### 持续改进
- 定期评估代码审查流程的有效性
- 收集团队成员对代码审查流程的反馈
- 根据项目进展和团队成长调整代码审查策略
