# 代码编写规则

## 通用规范

### 命名规范
- 变量/函数: 使用小驼峰命名法 (camelCase)
- 类/组件: 使用大驼峰命名法 (PascalCase)
- 常量: 使用大写下划线 (UPPER_SNAKE_CASE)
- CSS 类名: 使用 BEM 命名法或项目约定的命名规范

### 注释规范
- 使用 JSDoc 风格为函数、组件添加注释
- 复杂逻辑必须添加注释说明
- 临时代码使用 `// TODO:` 标记，技术债务使用 `// FIXME:` 标记

### 文件组织
- 单一职责原则：一个文件只做一件事
- 按功能/模块组织代码，而非按文件类型
- 导入顺序：第三方库 > 内部模块 > 相对路径模块

## Vue 项目规范

### 组件设计
- 使用 Composition API 并遵循 `<script setup>` 语法
- 组件名使用大驼峰 (PascalCase)
- 基础组件使用 `Base` 前缀 (如 `BaseButton.vue`)
- 单例组件使用 `The` 前缀 (如 `TheHeader.vue`)
- 紧密耦合的子组件使用父组件名作为前缀 (如 `UserListItem.vue`)

### Composition API 最佳实践
- 优先使用 `ref`/`reactive` 而非 `data` 选项
- 使用 `defineProps`/`defineEmits` 定义 props 和事件
- 将可复用逻辑提取到 composables (自定义 hooks) 中
- 自定义 hooks 命名以 `use` 开头 (如 `useUserData`)

### Props 规范
- 使用 TypeScript 为 props 添加类型定义
- 为 props 提供默认值和验证
- Props 命名使用小驼峰 (camelCase)

### 事件规范
- 事件名称使用 kebab-case (如 `@update-value`)
- 提供详细的事件参数类型

### 模板规范
- 保持模板简洁，复杂逻辑移至计算属性或方法
- v-for 必须搭配 key 使用
- 避免在模板中使用复杂表达式

## React 项目规范

### 组件设计
- 函数组件 + Hooks 优先于类组件
- 使用 PascalCase 命名组件和文件
- 将 JSX 与逻辑分离

### Hooks 最佳实践
- 遵循 Hooks 规则（只在顶层调用，只在函数组件中使用）
- 自定义 hooks 命名以 `use` 开头
- 使用 `useMemo`/`useCallback` 优化性能
- 不要过度使用 `useEffect`

### Props 规范
- 使用 TypeScript 为 props 添加类型定义
- 使用解构赋值接收 props
- 为非必须的 props 提供默认值

## TypeScript 规范

### 类型定义
- 为所有变量、函数参数和返回值定义类型
- 避免使用 `any`，必要时使用 `unknown`
- 利用泛型提高代码复用性
- 使用接口 (interface) 定义对象结构

### 类型文件组织
- 共享类型定义放在 `types` 目录下
- 模块特定的类型与模块代码放在一起
- 使用 barrel 文件 (index.ts) 统一导出

## 性能优化

### 首屏加载优化
- 路由懒加载
- 组件按需加载
- 第三方库按需引入
- 关键 CSS 内联

### 运行时优化
- 避免不必要的重渲染
- 使用 `computed`/`useMemo` 缓存计算结果
- 列表虚拟化处理大数据
- 防抖/节流处理频繁事件

### 资源优化
- 图片优化（WebP 格式，响应式图片）
- SVG 图标优先
- 使用现代构建工具（Vite, Webpack 5）
- 合理分包，避免主包过大
